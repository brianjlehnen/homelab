# lsi-plex-values.yaml
# Place this file in your k8s-homelab repository, e.g., apps/plex/lsi-plex-values.yaml

image:
  repository: lscr.io/linuxserver/plex
  tag: "1.41.7.9823-59f304c16" # Pin to this specific stable version
  # Find more LSI tags here: https://docs.linuxserver.io/images/docker-plex/#versions

env:
  TZ: "America/Chicago" # Set your timezone
  PUID: "1026"          # Your Synology NAS admin UID
  PGID: "100"           # Your users GID
  # PLEX_CLAIM: "" # Add this here if you need to claim Plex on its very first run, then remove/blank this line from Git.

# Persistence for /config directory. This chart will dynamically create the PVC for you.
persistence:
  config:
    enabled: true
    accessMode: ReadWriteOnce
    size: "25Gi" # Recommended initial size for Plex metadata. Can be 50Gi if you have a massive library.
    storageClass: "nfs-client" # CRITICAL: This points to your Synology NAS
    subPath: "" # Leave blank to use the root of the PVC for Plex config

# Optional: Transcode volume. You can enable this if you need a separate, faster volume for transcoding.
  persistence:
    transcode:
      enabled: true
      accessMode: ReadWriteOnce
      size: "10Gi" # Size for transcode cache
      storageClass: "nfs-client" # Consider an SSD-backed StorageClass here if available
      mountPath: "/transcode"

# Media mounts. This connects your existing Synology media shares to Plex.
extraVolumes:
  - name: media-movies
    nfs:
      server: "192.168.4.159" # Your Synology NAS IP
      path: "/volume1/Media/Movies" # Exact NFS export path for your Movies
  - name: media-tvshows
    nfs:
      server: "192.168.4.159" # Your Synology NAS IP
      path: "/volume1/Media/TV" # Exact NFS export path for your TV Shows
  # Add more entries here if you have Music, Photos, etc.

extraVolumeMounts:
  - name: media-movies
    mountPath: "/data/movies" # The path Plex sees for your movies
    readOnly: true
  - name: media-tvshows
    mountPath: "/data/tvshows" # The path Plex sees for your TV shows
  # Add more mounts corresponding to your extraVolumes

# Ingress configuration. This chart will handle creating the Ingress resource correctly.
ingress:
  main: # The main Ingress for Plex's web UI
    enabled: true
    ingressClassName: "nginx" # Your Ingress Class (e.g., "nginx")
    annotations:
      cert-manager.io/cluster-issuer: "ca-clusterissuer" # Your Cert-Manager ClusterIssuer
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP" # Plex's web UI listens on HTTP internally
      # Consider adding Nginx proxy buffer annotations here if you experience streaming issues later:
      # nginx.ingress.kubernetes.io/proxy-buffering: "on"
      # nginx.ingress.kubernetes.io/proxy-buffers: "8 128k"
      # nginx.ingress.kubernetes.io/proxy-buffer-size: "256k"
    hosts:
      - host: "plex.lab1830.local" # Your desired Plex hostname
        paths:
          - path: / # Plex typically serves from /web or /
            pathType: Prefix
    tls:
      - secretName: plex-tls-cert # Cert-Manager will create and manage this Secret
        hosts:
          - "plex.lab1830.local"

# Resource limits and requests. Good practice for Kubernetes resource management.
resources:
  requests:
    cpu: 100m
    memory: 256Mi
  limits:
    cpu: 1000m # Allocate 1 CPU core
    memory: 2Gi # Allocate 2 GB RAM

# Pod Security Context. Ensures correct volume permissions for Plex.
podSecurityContext:
  fsGroup: 100 # Your users GID (should match PGID)

# Service configuration (defaults are usually fine as Ingress handles external access)
# service:
#   main:
#     type: ClusterIP
#     ports:
#       http:
#         port: 32400
#         targetPort: 32400