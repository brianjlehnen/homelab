apiVersion: apps/v1
kind: Deployment
metadata:
  name: homepage
  namespace: homepage
  labels:
    app.kubernetes.io/name: homepage
    app.kubernetes.io/instance: homepage # Using 'homepage' as instance name
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: homepage
      app.kubernetes.io/instance: homepage
  strategy:
    type: RollingUpdate # Or Recreate, RollingUpdate is usually fine
  template:
    metadata:
      labels:
        app.kubernetes.io/name: homepage
        app.kubernetes.io/instance: homepage
    spec:
      serviceAccountName: homepage # From 03-homepage-rbac.yaml
      automountServiceAccountToken: true
      # This fsGroup will apply to the PVC mount, making it writable by GID 1000
      securityContext:
        fsGroup: 1000 
      volumes:
        # Volume from the PVC for /app/config
        - name: homepage-persistent-config
          persistentVolumeClaim:
            claimName: homepage-config-pvc # From 02-homepage-config-pvc.yaml

        # Volume from the ConfigMap holding all initial config files
        - name: homepage-initial-config-volume
          configMap:
            name: homepage-main-config # From 01-homepage-main-config-cm.yaml
            # Define items to control file permissions if needed,
            # though copy will handle it. Default mode is 0644.
            # items:
            #   - key: "settings.yaml"
            #     path: "settings.yaml"
            #   - key: "bookmarks.yaml"
            #     path: "bookmarks.yaml"
            #   - key: "services.yaml"
            #     path: "services.yaml"
            #   - key: "widgets.yaml"
            #     path: "widgets.yaml"
            #   - key: "kubernetes.yaml"
            #     path: "kubernetes.yaml"
            #   - key: "docker.yaml"
            #     path: "docker.yaml"
            #   - key: "custom.css"
            #     path: "custom.css"
            #   - key: "custom.js"
            #     path: "custom.js"

        # Volume for /app/config/logs as per official example
        - name: homepage-logs
          emptyDir: {}

      initContainers:
        - name: populate-config-from-cm
          image: busybox:latest # Using busybox for cp
          command:
            - /bin/sh
            - -c
            - |
              echo "Initializing Homepage configuration in PVC from ConfigMap..."
              CONFIG_SOURCE_DIR="/tmp/initial-config"
              CONFIG_TARGET_DIR="/app/config-target" # This is the PVC mount point for the initContainer

              # Copy each file from the ConfigMap volume to the PVC volume
              # This runs once when the pod is created or recreated.
              # It will overwrite existing files in the PVC if they exist with these names.
              # If you want to preserve changes made via UI (if app writes to PVC),
              # you might add 'if [ ! -f ... ]' checks like before, but for initial setup,
              # overwriting ensures Git state is applied.
              
              echo "Copying settings.yaml..."
              cp "${CONFIG_SOURCE_DIR}/settings.yaml" "${CONFIG_TARGET_DIR}/settings.yaml"
              
              echo "Copying bookmarks.yaml..."
              cp "${CONFIG_SOURCE_DIR}/bookmarks.yaml" "${CONFIG_TARGET_DIR}/bookmarks.yaml"
              
              echo "Copying services.yaml..."
              cp "${CONFIG_SOURCE_DIR}/services.yaml" "${CONFIG_TARGET_DIR}/services.yaml"
              
              echo "Copying widgets.yaml..."
              cp "${CONFIG_SOURCE_DIR}/widgets.yaml" "${CONFIG_TARGET_DIR}/widgets.yaml"

              echo "Copying kubernetes.yaml..."
              cp "${CONFIG_SOURCE_DIR}/kubernetes.yaml" "${CONFIG_TARGET_DIR}/kubernetes.yaml"

              echo "Copying docker.yaml..."
              cp "${CONFIG_SOURCE_DIR}/docker.yaml" "${CONFIG_TARGET_DIR}/docker.yaml"

              echo "Copying custom.css..."
              cp "${CONFIG_SOURCE_DIR}/custom.css" "${CONFIG_TARGET_DIR}/custom.css"

              echo "Copying custom.js..."
              cp "${CONFIG_SOURCE_DIR}/custom.js" "${CONFIG_TARGET_DIR}/custom.js"
              
              echo "Homepage config initialization complete."
          volumeMounts:
            # Mount the PVC (writable)
            - name: homepage-persistent-config
              mountPath: /app/config-target # Target for copied files
            # Mount the ConfigMap (read-only) that has all config files as keys
            - name: homepage-initial-config-volume
              mountPath: /tmp/initial-config # Source of files to copy
              readOnly: true
          # This initContainer can run as root to ensure permissions to write to the PVC
          # if fsGroup alone isn't sufficient for the copy, though fsGroup should make it work.
          # securityContext:
          #   runAsUser: 0 

      containers:
        - name: homepage
          image: ghcr.io/gethomepage/homepage:v1.3.2 # Pinned to a recent stable version
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 3000 # Default Homepage port
              protocol: TCP
          env:
            # As per official manifest, HOMEPAGE_ALLOWED_HOSTS might be needed if you access via IP or different hostnames directly
            # For Ingress access, it's usually less critical if the Ingress handles host matching.
            # - name: HOMEPAGE_ALLOWED_HOSTS
            #   value: "homepage.lab1830.local,your-node-ip,localhost" # Adjust as needed
            - name: PUID # Process User ID
              value: "1000"
            - name: PGID # Process Group ID
              value: "1000"
          volumeMounts:
            # Main container mounts the PVC (now populated by initContainer) at /app/config
            - name: homepage-persistent-config
              mountPath: /app/config
            # Mount for /app/config/logs as per official example
            - name: homepage-logs
              mountPath: /app/config/logs
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            # fsGroup is set at the pod level
            readOnlyRootFilesystem: true 
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
          readinessProbe:
            httpGet:
              path: / # Homepage serves on root
              port: http
            initialDelaySeconds: 10 # Increased slightly
            periodSeconds: 10
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 20 # Increased slightly
            periodSeconds: 20
            failureThreshold: 3
          # resources: # Optional: define resource requests and limits
          #   requests:
          #     cpu: "100m"
          #     memory: "128Mi"
          #   limits:
          #     cpu: "500m"
          #     memory: "256Mi"